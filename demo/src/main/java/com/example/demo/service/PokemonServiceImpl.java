package com.example.demo.service;

import com.example.demo.dto.PokeApiTypeResponseDTO;
import com.example.demo.gateway.PokeApiGateway;
import com.example.demo.repository.PokemonRepository;
import com.example.demo.exception.ResourceNotFoundException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.context.annotation.Primary;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import com.example.demo.model.Pokemon;
import java.util.List;
import java.util.Optional;

@Service
@Primary
public class PokemonServiceImpl implements PokemonService {

    private final PokeApiGateway pokeApiGateway;
    private final PokemonRepository pokemonRepository;

    @Autowired
    public PokemonServiceImpl(PokeApiGateway pokeApiGateway, PokemonRepository pokemonRepository) {
        this.pokeApiGateway = pokeApiGateway;
        this.pokemonRepository = pokemonRepository;
    }

    // ‚û°Ô∏è IMPLEMENTA√á√ÉO CORRIGIDA DE CACHE E INTEGRA√á√ÉO (M√âTODO 1)
    @Override // ‚¨ÖÔ∏è Essencial para satisfazer a interface
    @Cacheable("pokeApiTypeResponseDTO")
    public PokeApiTypeResponseDTO getPokemonsOfType(String type) {
        try {
            // Assume que existe um m√©todo getPokemonOfType no Gateway
            return pokeApiGateway.getPokemonOfType(type);
        } catch (Exception e) {
            throw new RuntimeException("Erro ao buscar dados da PokeAPI: " + e.getMessage(), e);
        }
    }

    // ‚û°Ô∏è IMPLEMENTA√á√ÉO CORRIGIDA DE LIMPEZA DE CACHE (M√âTODO 2)
    @Override // ‚¨ÖÔ∏è Essencial para satisfazer a interface
    @CacheEvict(value = "pokeApiTypeResponseDTO", allEntries = true)
    public void cleanPokemonsByTypeCache() {
        // Implementa√ß√£o m√≠nima para satisfazer a interface
        System.out.println("Cache de pokemons por tipo foi limpo!");
    }

    // -----------------------------------
    // M√âTODOS EXISTENTES
    // -----------------------------------

    @Override
    @Transactional // Adicionado para garantir a escrita
    public Pokemon toggleFavorite(int id) {
        Pokemon pokemon = pokemonRepository.findByIdPokeApi(id)
                .orElseThrow(() -> new RuntimeException("Pokemon n√£o encontrado com ID: " + id));

        // Note: O isFavorite() e setFavorite() aqui devem ser os da Entidade
        pokemon.setFavorite(!pokemon.isFavorite());
        return pokemonRepository.save(pokemon);
    }

    @Override
    public List<Pokemon> getFavorites() {
        return pokemonRepository.findByFavoriteTrue();
    }


    // üéØ IMPLEMENTA√á√ÉO DO PATCH /favorite (REQUISITO 5)
    @Override
    @Transactional
    public Pokemon updateFavoriteAndNote(Long idLocal, Boolean favorite, String note) {

        // 1. Busca o Pok√©mon no H2 pelo idLocal. Lan√ßa 404 se n√£o existir.
        Pokemon pokemon = pokemonRepository.findById(idLocal)
                .orElseThrow(() -> new ResourceNotFoundException("Pok√©mon local n√£o encontrado com ID: " + idLocal));

        // 2. L√≥gica de Atualiza√ß√£o Parcial
        if (favorite != null) {
            pokemon.setFavorite(favorite);
        }
        if (note != null) {
            pokemon.setNote(note);
        }

        // 3. Salva (atualiza) e retorna
        return pokemonRepository.save(pokemon);
    }
}